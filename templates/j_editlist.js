//------------------------------------------------
// !!!!! vvvvv vvvvv vvvvv vvvvv vvvvv vvvvv vvvvv
//
// TODO(sandello): Правки по Левенштейну.
//
// Необходимо реализовать алгоритм расчета расстояния Левенштейна
// между строками left и right и вернуть "список правок",
// как получить из левой строки -- правую.
//
// На входе -- две строки.
// На выходе -- массив правок вида:
// [
//   ["I", 0, "a"], // вставка
//   ["D", 3],      // удаление
//   ["X", 4, "b"], // замена
// ]
//
// Пример:
//   * editList("cat", "cats") = [ ["I", 3, "s"] ]
//   * editList("cat", "cuts") = [ ["X", 1, "u"], ["I", 3, "s"] ]
//   * editList("cat", "at")   = [ ["D", 0 ] ]
//   * editList("", "hi")      = [ ["I", 0, "h"], ["I", 1, "i"] ]
//
// Подсказки:
//   1. Для ассоциативной структуры данных с численными ключами можно использовать JS-объекты:
//        var a = {}; a[5] = 0;
//      При этом элементы, к которым не было обращений -- не инициализированы.
//        var a = {}; a[8] === undefined;
//      Проверка наличия ключа может быть устроена так:
//        var a = {}; if (a[8] === undefined) { /* нет ключа */ } else { /* есть ключ */ }
//   2. Для ассоциативной структуры с произвольным ключами можно использовать Map.
//      https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Map

function editList(left, right) {
    // TODO: Напиши меня!
}

// !!!!! ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^ ^^^^^
//------------------------------------------------
